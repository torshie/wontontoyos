include $(WONTON)/Makefile.config

rootBuildDirectory = $(WONTON)/$(BUILD_MODE).build

compilerFlags = $(CXXFLAGS) \
		-nostdlib -nostartfiles -nodefaultlibs -ansi -mno-red-zone -fno-exceptions \
		-I$(WONTON)/common -I$(WONTON) -I$(WONTON)/src \
		-W -Wall -Wextra -Werror -Wno-enum-compare \
		-g
x86Flags = -m32 -D__X86_32__
x64Flags = -mcmodel=large
asmFlags = -D__ASM__
linkerFlags = $(LDFLAGS) \
		-nostdlib -nostartfiles -nodefaultlibs \
		$(addprefix -L, $(dir $(REQUIRED_LIBRARIES))) \
		$(addprefix -l, $(patsubst lib%, %, $(patsubst %.a, %, $(notdir $(REQUIRED_LIBRARIES))))) \
		-Wl,-z,max-page-size=0x1000
ifeq ($(BUILD_MODE), test)
  compilerFlags += -DENABLE_RUNTIME_CHECK=1 -O2
else
  ifeq ($(BUILD_MODE), debug)
    compilerFlags += -DENABLE_GDB_HOOK=1 -DENABLE_RUNTIME_CHECK=1 -O0
  else
    compilerFlags += -O2
  endif
endif

# The relative path of current directory, compared with $(WONTON)
ifeq ($(CURDIR), $(WONTON))
  relativePath = .
else
  relativePath = $(strip $(subst $(WONTON)/, , $(CURDIR)))
endif

# The build directory of files under currect directory
buildDirectory = $(rootBuildDirectory)/$(relativePath)

buildDirectoryMagic = $(buildDirectory)/.buildDirectoryMagic

# The object files to be compiled
OBJS += $(patsubst %.cpp, %.o, $(wildcard *.cpp)) $(patsubst %.S, %.o, $(wildcard *.S))

# The absolute path of the object files
objectFiles = $(addprefix $(buildDirectory)/, $(OBJS))

# If variable MODULES isn't defined, set it to all the directories that contain a 'Makefile' file
ifndef MODULES
  MODULES = $(shell find . -maxdepth 2 -mindepth 2 -name Makefile -type f \
    | sed 's/\/Makefile//g' \
    | sed 's/^\.\///g')
endif

# .mak files
MAK_FILES += $(patsubst %.cpp, %.mak, $(wildcard *.cpp)) 
# All the object files that were generated when building current module
allObjectFiles = $(shell find $(buildDirectory) -type f | grep \.o$$)
