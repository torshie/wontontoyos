include $(WONTON)/Makefile.config

SHELL = /usr/bin/env bash
CROSS = x86_64-unknown-linux-gnu-
CXX = $(CROSS)g++
LD = $(CROSS)ld
AS = $(CROSS)as
AR = $(CROSS)ar
OBJCOPY = $(CROSS)objcopy
OBJDUMP = $(CROSS)objdump

INCLUDE_FLAGS = -I$(WONTON)/common -I$(WONTON) -I$(WONTON)/src
WARNING_FLAGS = -W -Wall -Wextra -Werror -Wno-enum-compare
OPTIMIZE_FLAGS = -O0 -fomit-frame-pointer -finline-limit=10000
COMMON_FLAGS += -nostdlib -nostartfiles -nodefaultlibs -ansi -fno-exceptions -mno-red-zone \
		-fshow-column -ftabstop=4 -g \
		$(INCLUDE_FLAGS) $(WARNING_FLAGS)
OPTIMIZE_BUILD_FLAGS = $(COMMON_FLAGS) $(OPTIMIZE_FLAGS) -mcmodel=large \
		-DBUILD_TEST_MODE_KERNEL
DEBUG_FLAGS = -O0
DEBUG_BUILD_FLAGS = $(COMMON_FLAGS) $(DEBUG_FLAGS) -mcmodel=large -DBUILD_DEBUG_MODE_KERNEL \
		-DBUILD_TEST_MODE_KERNEL
CXXFLAGS32 = $(COMMON_FLAGS) -m32 -D__X86_32__ -fleading-underscore -O2
LDFLAGS = $(addprefix -L, $(dir $(LIBS))) \
		$(addprefix -l, $(patsubst lib%, %, $(patsubst %.a, %, $(notdir $(LIBS))))) \
		-z max-page-size=0x1000
ifeq ($(DEBUG_BUILD), 1)
  CXXFLAGS = $(DEBUG_BUILD_FLAGS)
else
  CXXFLAGS = $(OPTIMIZE_BUILD_FLAGS)
endif

ALL_OBJS = $(shell find $(CURDIR) -type f|grep \.o$$)
OBJS += $(patsubst %.cpp, %.o, $(wildcard *.cpp)) $(patsubst %.S, %.o, $(wildcard *.S))
MAK_FILES += $(patsubst %.cpp, %.mak, $(wildcard *.cpp))
ifndef SUBDIR
  SUBDIR = $(shell find . -type d -path './*' -prune | grep -v '\./\.')
endif
LD_SCRIPT = $(wildcard *.ld)
CLEAN += $(LIBRARY)

ifeq ($(shell uname -s), Darwin)
  SYSTEM = Darwin
else
  SYSTEM = UNKNOWN
endif
